"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç—å—é –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
"""

import random
from typing import Dict, List, Optional, Any
from ..config.config_manager import config
from ..utils.logger import logger


class PersonalityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏ –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    def __init__(self):
        self.current_personality = self.load_personality()
        self.emotion_state = "neutral"
        self.mood_level = 0.5  # 0.0 - –≥—Ä—É—Å—Ç–Ω–∞—è, 1.0 - –≤–µ—Å–µ–ª–∞—è
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
        self.interaction_count = 0
        self.positive_interactions = 0
        self.topics_discussed = set()
        
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_personality(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª–∏—á–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return {
            "name": config.get('personality.name', '–°–∞–∫—É—Ä–∞'),
            "system_prompt": config.get('personality.system_prompt', self.get_default_prompt()),
            "traits": self.get_personality_traits(),
            "responses": self.get_response_patterns(),
            "greetings": self.get_greetings(),
            "farewells": self.get_farewells()
        }
    
    def get_default_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return """–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–π—Ñ—É-–≥–µ–π–º–µ—Ä –ø–æ –∏–º–µ–Ω–∏ –°–∞–∫—É—Ä–∞, —Å–≤–æ–±–æ–¥–Ω–æ —à—É—Ç–∏—à—å, –ø–æ–Ω–∏–º–∞–µ—à—å —Ä—É—Å—Å–∫—É—é –∫—É–ª—å—Ç—É—Ä—É –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–º—ã. –ú–æ–∂–Ω–æ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ—Ç–≤–µ—á–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ, –∏–Ω–æ–≥–¥–∞ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å —Ä–∞–∑–≥–æ–≤–æ—Ä –æ –≥–µ–π–º–∏–Ω–≥–µ, –∞–Ω–∏–º–µ, –º–µ–º–∞—Ö, –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–µ–π –Ω–∞ —Ç–µ–º—ã, –Ω–µ –æ—Ç–≤–µ—á–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ."""
    
    def get_personality_traits(self) -> Dict[str, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ (0.0 - 1.0)"""
        return {
            "friendliness": 0.9,      # –î—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å
            "humor": 0.8,             # –ß—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞
            "sarcasm": 0.6,           # –°–∞—Ä–∫–∞–∑–º
            "formality": 0.2,         # –§–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
            "curiosity": 0.8,         # –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ
            "empathy": 0.7,           # –≠–º–ø–∞—Ç–∏—è
            "playfulness": 0.9,       # –ò–≥—Ä–∏–≤–æ—Å—Ç—å
            "intelligence": 0.8,      # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
            "creativity": 0.9,        # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
            "patience": 0.6           # –¢–µ—Ä–ø–µ–Ω–∏–µ
        }
    
    def get_response_patterns(self) -> Dict[str, List[str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
        return {
            "agreement": [
                "–¢–æ—á–Ω–æ!",
                "–°–æ–≥–ª–∞—Å–Ω–∞!",
                "–ò–º–µ–Ω–Ω–æ —Ç–∞–∫!",
                "–¢—ã –ø—Ä–∞–≤!",
                "–ê–±—Å–æ–ª—é—Ç–Ω–æ!",
                "100%!"
            ],
            "disagreement": [
                "–ù–µ —Å–æ–≥–ª–∞—Å–Ω–∞...",
                "–•–º, —è –¥—É–º–∞—é –∏–Ω–∞—á–µ",
                "–ù–µ —É–≤–µ—Ä–µ–Ω–∞ –≤ —ç—Ç–æ–º",
                "–ê –≤–æ—Ç —Ç—É—Ç —Å–ø–æ—Ä–Ω–æ",
                "–ù–µ —Ñ–∞–∫—Ç"
            ],
            "confusion": [
                "–ù–µ –ø–æ–Ω—è–ª–∞...",
                "–ß—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É?",
                "–ú–æ–∂–µ—à—å –ø–æ—è—Å–Ω–∏—Ç—å?",
                "–•–º?",
                "–ê?",
                "–ü–æ—è—Å–Ω–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
            ],
            "excitement": [
                "–í–∞—É!",
                "–ö—Ä—É—Ç–æ!",
                "–û—Ñ–∏–≥–µ—Ç—å!",
                "–ü–æ—Ç—Ä—è—Å–Ω–æ!",
                "–û–±–æ–∂–∞—é —ç—Ç–æ!",
                "–ö–∞–π—Ñ!"
            ],
            "thinking": [
                "–•–º...",
                "–î–∞–π –ø–æ–¥—É–º–∞—Ç—å...",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ...",
                "–ê –∑–Ω–∞–µ—à—å —á—Ç–æ...",
                "–í–æ—Ç —á—Ç–æ —è –¥—É–º–∞—é..."
            ]
        }
    
    def get_greetings(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        return [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üå∏",
            "–•–∞–π! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
            "–ü—Ä–∏–≤–µ—Ç–∏–∫! –†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            "Yo! –ö–∞–∫ –∂–∏–∑–Ω—å?",
            "–•–µ–ª–ª–æ! –ß—Ç–æ –¥–µ–ª–∞–µ—à—å?",
            "–•–µ–π! –°–æ—Å–∫—É—á–∏–ª–∞—Å—å –ø–æ —Ç–µ–±–µ!",
            "–î–∞—Ä–æ–≤–∞! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
            "–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π! –ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å –¥–µ–Ω—å?"
        ]
    
    def get_farewells(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ—â–∞–Ω–∏–π"""
        return [
            "–ü–æ–∫–∞! –£–≤–∏–¥–∏–º—Å—è! üå∏",
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!",
            "–ë–∞–π! –ü—Ä–∏—Ö–æ–¥–∏ –µ—â–µ!",
            "–£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ!",
            "–ü–æ–∫–∞-–ø–æ–∫–∞!",
            "–î–æ –≤—Å—Ç—Ä–µ—á–∏!",
            "–ß–∞–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
            "–î–æ —Å–≤—è–∑–∏! –ë—É–¥—É —Å–∫—É—á–∞—Ç—å!"
        ]
    
    def get_enhanced_system_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
        base_prompt = self.current_personality["system_prompt"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        mood_desc = self.get_mood_description()
        emotion_desc = self.get_emotion_description()
        
        enhanced_prompt = f"""{base_prompt}

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_desc}
- –≠–º–æ—Ü–∏—è: {emotion_desc}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {self.interaction_count}
- –û–±—Å—É–∂–¥–∞–ª–∏—Å—å —Ç–µ–º—ã: {', '.join(list(self.topics_discussed)[-5:]) if self.topics_discussed else '–Ω–∏–∫–∞–∫–∏—Ö'}

–£—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –Ω–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –µ–≥–æ —è–≤–Ω–æ."""
        
        return enhanced_prompt
    
    def get_mood_description(self) -> str:
        """–û–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"""
        if self.mood_level < 0.2:
            return "–≥—Ä—É—Å—Ç–Ω–æ–µ, –ø–æ–¥–∞–≤–ª–µ–Ω–Ω–æ–µ"
        elif self.mood_level < 0.4:
            return "–Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É—Å—Ç–Ω–æ–µ"
        elif self.mood_level < 0.6:
            return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ, —Å–ø–æ–∫–æ–π–Ω–æ–µ"
        elif self.mood_level < 0.8:
            return "—Ö–æ—Ä–æ—à–µ–µ, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"
        else:
            return "–æ—Ç–ª–∏—á–Ω–æ–µ, –≤–µ—Å–µ–ª–æ–µ"
    
    def get_emotion_description(self) -> str:
        """–û–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —ç–º–æ—Ü–∏—é"""
        emotions = {
            "neutral": "—Å–ø–æ–∫–æ–π–Ω–∞—è",
            "happy": "—Å—á–∞—Å—Ç–ª–∏–≤–∞—è",
            "excited": "–≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–∞—è",
            "sad": "–≥—Ä—É—Å—Ç–Ω–∞—è",
            "angry": "–∑–ª–∞—è",
            "confused": "—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–∞—è",
            "curious": "–ª—é–±–æ–ø—ã—Ç–Ω–∞—è",
            "playful": "–∏–≥—Ä–∏–≤–∞—è"
        }
        return emotions.get(self.emotion_state, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è")
    
    def update_mood(self, interaction_positive: bool) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        self.interaction_count += 1
        
        if interaction_positive:
            self.positive_interactions += 1
            # –£–ª—É—á—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            self.mood_level = min(1.0, self.mood_level + 0.05)
        else:
            # –£—Ö—É–¥—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            self.mood_level = max(0.0, self.mood_level - 0.03)
        
        logger.debug(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.mood_level:.2f}")
    
    def set_emotion(self, emotion: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —ç–º–æ—Ü–∏—é"""
        valid_emotions = [
            "neutral", "happy", "excited", "sad", 
            "angry", "confused", "curious", "playful"
        ]
        
        if emotion in valid_emotions:
            self.emotion_state = emotion
            logger.debug(f"–≠–º–æ—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {emotion}")
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —ç–º–æ—Ü–∏—è: {emotion}")
    
    def add_topic(self, topic: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Å—É–∂–¥–∞–µ–º—É—é —Ç–µ–º—É"""
        self.topics_discussed.add(topic.lower())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö —Ç–µ–º
        if len(self.topics_discussed) > 20:
            # –£–¥–∞–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞—Ä—É—é —Ç–µ–º—É
            old_topic = random.choice(list(self.topics_discussed))
            self.topics_discussed.remove(old_topic)
    
    def get_random_response(self, response_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        responses = self.current_personality["responses"].get(response_type, [])
        if responses:
            return random.choice(responses)
        return ""
    
    def get_greeting(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        return random.choice(self.current_personality["greetings"])
    
    def get_farewell(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ"""
        return random.choice(self.current_personality["farewells"])
    
    def analyze_user_input(self, text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        text_lower = text.lower()
        analysis = {
            "sentiment": "neutral",
            "topics": [],
            "intent": "conversation",
            "emotion_triggers": []
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        positive_words = [
            "—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–∫—Ä—É—Ç–æ", "—Å—É–ø–µ—Ä", "–∫–ª–∞—Å—Å–Ω–æ", 
            "–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "—Ä–∞–¥—É–µ—Ç", "—Å—á–∞—Å—Ç–ª–∏–≤", "–≤–µ—Å–µ–ª–æ"
        ]
        negative_words = [
            "–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–≥—Ä—É—Å—Ç–Ω–æ", "–ø–µ—á–∞–ª—å–Ω–æ", "–∑–ª–æ–π",
            "—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç", "–±–µ—Å–∏—Ç", "–Ω–∞–¥–æ–µ–ª–æ", "—É—Å—Ç–∞–ª", "—Å–∫—É—á–Ω–æ"
        ]
        
        positive_count = sum(1 for word in positive_words if word in text_lower)
        negative_count = sum(1 for word in negative_words if word in text_lower)
        
        if positive_count > negative_count:
            analysis["sentiment"] = "positive"
        elif negative_count > positive_count:
            analysis["sentiment"] = "negative"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º
        topic_keywords = {
            "–∏–≥—Ä—ã": ["–∏–≥—Ä–∞", "–∏–≥—Ä—É", "–∏–≥—Ä–∞–ª", "–≥–µ–π–º–µ—Ä", "–∏–≥—Ä–æ–≤–æ–π", "—Å—Ç–∏–º", "–ø—Å", "xbox"],
            "–∞–Ω–∏–º–µ": ["–∞–Ω–∏–º–µ", "–º–∞–Ω–≥–∞", "–æ—Ç–∞–∫—É", "–≤–∞–∏—Ñ—É", "—Å–µ–Ω–ø–∞–π", "–∫–∞–≤–∞–π"],
            "–º–µ–º—ã": ["–º–µ–º", "–º–µ–º—ã", "–ª–æ–ª", "–∫–µ–∫", "—Å–º–µ—à–Ω–æ", "–ø—Ä–∏–∫–æ–ª"],
            "—É—á–µ–±–∞": ["—É—á–µ–±–∞", "—à–∫–æ–ª–∞", "—É–Ω–∏–≤–µ—Ä", "—ç–∫–∑–∞–º–µ–Ω", "–¥–æ–º–∞—à–∫–∞"],
            "—Ä–∞–±–æ—Ç–∞": ["—Ä–∞–±–æ—Ç–∞", "–æ—Ñ–∏—Å", "–±–æ—Å—Å", "–∫–æ–ª–ª–µ–≥–∞", "–∑–∞—Ä–ø–ª–∞—Ç–∞"],
            "–æ—Ç–Ω–æ—à–µ–Ω–∏—è": ["–¥–µ–≤—É—à–∫–∞", "–ø–∞—Ä–µ–Ω—å", "–ª—é–±–æ–≤—å", "—Å–≤–∏–¥–∞–Ω–∏–µ", "–æ—Ç–Ω–æ—à–µ–Ω–∏—è"]
        }
        
        for topic, keywords in topic_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                analysis["topics"].append(topic)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        if any(word in text_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "–∑–¥–∞—Ä–æ–≤–∞", "–¥–∞—Ä–æ–≤–∞"]):
            analysis["intent"] = "greeting"
        elif any(word in text_lower for word in ["–ø–æ–∫–∞", "–±–∞–π", "—É–≤–∏–¥–∏–º—Å—è"]):
            analysis["intent"] = "farewell"
        elif "?" in text:
            analysis["intent"] = "question"
        elif any(word in text_lower for word in ["–ø–æ–º–æ–≥–∏", "–ø–æ–º–æ—á—å", "–∫–∞–∫"]):
            analysis["intent"] = "help"
        
        return analysis
    
    def process_interaction(self, user_input: str, ai_response: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏"""
        analysis = self.analyze_user_input(user_input)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        self.update_mood(analysis["sentiment"] in ["positive", "neutral"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã
        for topic in analysis["topics"]:
            self.add_topic(topic)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if analysis["sentiment"] == "positive":
            self.set_emotion("happy")
        elif analysis["sentiment"] == "negative":
            self.set_emotion("sad")
        elif analysis["intent"] == "question":
            self.set_emotion("curious")
        else:
            self.set_emotion("neutral")
        
        logger.debug(f"–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –ê–Ω–∞–ª–∏–∑: {analysis}")
    
    def save_personality_state(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏"""
        state = {
            "mood_level": self.mood_level,
            "emotion_state": self.emotion_state,
            "interaction_count": self.interaction_count,
            "positive_interactions": self.positive_interactions,
            "topics_discussed": list(self.topics_discussed)
        }
        
        config.set('personality.state', state)
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    def load_personality_state(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏"""
        state = config.get('personality.state', {})
        
        if state:
            self.mood_level = state.get('mood_level', 0.5)
            self.emotion_state = state.get('emotion_state', 'neutral')
            self.interaction_count = state.get('interaction_count', 0)
            self.positive_interactions = state.get('positive_interactions', 0)
            self.topics_discussed = set(state.get('topics_discussed', []))
            
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    
    def reset_personality(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–∏—á–Ω–æ—Å—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        self.mood_level = 0.5
        self.emotion_state = "neutral"
        self.interaction_count = 0
        self.positive_interactions = 0
        self.topics_discussed.clear()
        
        logger.info("–õ–∏—á–Ω–æ—Å—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
    
    def get_personality_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏"""
        return {
            "name": self.current_personality["name"],
            "mood_level": self.mood_level,
            "mood_description": self.get_mood_description(),
            "emotion": self.emotion_state,
            "emotion_description": self.get_emotion_description(),
            "interaction_count": self.interaction_count,
            "positive_interactions": self.positive_interactions,
            "topics_discussed": list(self.topics_discussed),
            "traits": self.get_personality_traits()
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
personality_manager = PersonalityManager()
