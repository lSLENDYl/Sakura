"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Sakura AI
"""

import sys
import asyncio
from typing import Optional
from PyQt5.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
    QTextEdit, QLineEdit, QPushButton, QMenuBar, 
    QStatusBar, QSplitter, QMessageBox, QLabel,
    QProgressBar, QSystemTrayIcon, QMenu, QAction
)
from PyQt5.QtCore import Qt, QTimer, QThread, pyqtSignal, QSize
from PyQt5.QtGui import QFont, QIcon, QPixmap

from .settings_dialog import SettingsDialog
from .widgets.chat_widget import ChatWidget
from ai.ollama_client import OllamaClient
from tts.silero_tts import SileroTTS
from stt.vosk_stt import VoskSTT
from config.config_manager import config
from utils.logger import logger


class ResponseThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò"""
    response_ready = pyqtSignal(str)
    error_occurred = pyqtSignal(str)
    
    def __init__(self, ollama_client: OllamaClient, user_input: str):
        super().__init__()
        self.ollama_client = ollama_client
        self.user_input = user_input
    
    def run(self):
        try:
            response = self.ollama_client.generate_response(self.user_input)
            self.response_ready.emit(response)
        except Exception as e:
            self.error_occurred.emit(str(e))


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.ollama_client = OllamaClient()
        self.tts = SileroTTS()
        self.stt = VoskSTT()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.is_listening = False
        self.is_muted = False
        self.current_response_thread: Optional[ResponseThread] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.setup_ui()
        self.setup_connections()
        self.setup_system_tray()
        self.load_settings()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        QTimer.singleShot(1000, self.check_components)
        
        logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("Sakura AI - –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –í–∞–π—Ñ—É")
        self.setMinimumSize(800, 600)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –í–∏–¥–∂–µ—Ç —á–∞—Ç–∞
        self.chat_widget = ChatWidget()
        main_layout.addWidget(self.chat_widget)
        
        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        input_layout = QHBoxLayout()
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_field = QLineEdit()
        self.input_field.setPlaceholderText("–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –°–∞–∫—É—Ä–µ...")
        self.input_field.setFont(QFont("Arial", 12))
        self.input_field.setMinimumHeight(40)
        input_layout.addWidget(self.input_field, stretch=1)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.send_button.setMinimumSize(100, 40)
        self.send_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
            }
        """)
        input_layout.addWidget(self.send_button)
        
        main_layout.addLayout(input_layout)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        self.mic_button = QPushButton("üé§ –°–ª—É—à–∞—Ç—å")
        self.mic_button.setMinimumSize(120, 35)
        self.mic_button.setCheckable(True)
        self.mic_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:checked {
                background-color: #f44336;
            }
        """)
        control_layout.addWidget(self.mic_button)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥–ª—É—à–µ–Ω–∏—è
        self.mute_button = QPushButton("üîä –ó–≤—É–∫")
        self.mute_button.setMinimumSize(100, 35)
        self.mute_button.setCheckable(True)
        self.mute_button.setStyleSheet("""
            QPushButton {
                background-color: #607D8B;
                color: white;
                border: none;
                border-radius: 5px;
            }
            QPushButton:checked {
                background-color: #f44336;
            }
        """)
        control_layout.addWidget(self.mute_button)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        self.clear_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_button.setMinimumSize(100, 35)
        self.clear_button.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)
        control_layout.addWidget(self.clear_button)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_button = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.settings_button.setMinimumSize(100, 35)
        self.settings_button.setStyleSheet("""
            QPushButton {
                background-color: #9C27B0;
                color: white;
                border: none;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #7B1FA2;
            }
        """)
        control_layout.addWidget(self.settings_button)
        
        control_layout.addStretch()
        main_layout.addLayout(control_layout)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_label = QLabel("–ì–æ—Ç–æ–≤")
        self.status_bar.addWidget(self.status_label)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.status_bar.addPermanentWidget(self.progress_bar)
        
        # –ú–µ–Ω—é
        self.setup_menu()
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu("–§–∞–π–ª")
        
        export_action = QAction("–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞", self)
        file_menu.addAction(export_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        settings_menu = menubar.addMenu("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        preferences_action = QAction("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", self)
        preferences_action.triggered.connect(self.show_settings)
        settings_menu.addAction(preferences_action)
        
        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = menubar.addMenu("–°–ø—Ä–∞–≤–∫–∞")
        
        about_action = QAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤"""
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_field.returnPressed.connect(self.send_message)
        
        # –ö–Ω–æ–ø–∫–∏
        self.send_button.clicked.connect(self.send_message)
        self.mic_button.clicked.connect(self.toggle_listening)
        self.mute_button.clicked.connect(self.toggle_mute)
        self.clear_button.clicked.connect(self.clear_history)
        self.settings_button.clicked.connect(self.show_settings)
        
        # STT callbacks
        self.stt.set_callbacks(
            on_partial=self.on_partial_speech,
            on_final=self.on_final_speech,
            on_error=self.on_speech_error
        )
    
    def setup_system_tray(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""
        if QSystemTrayIcon.isSystemTrayAvailable():
            self.tray_icon = QSystemTrayIcon(self)
            
            # –ú–µ–Ω—é —Ç—Ä–µ—è
            tray_menu = QMenu()
            
            show_action = QAction("–ü–æ–∫–∞–∑–∞—Ç—å", self)
            show_action.triggered.connect(self.show)
            tray_menu.addAction(show_action)
            
            quit_action = QAction("–í—ã—Ö–æ–¥", self)
            quit_action.triggered.connect(self.close)
            tray_menu.addAction(quit_action)
            
            self.tray_icon.setContextMenu(tray_menu)
            self.tray_icon.activated.connect(self.on_tray_activated)
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –†–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞
        window_size = config.get('gui.window_size', [800, 600])
        window_pos = config.get('gui.window_position', [100, 100])
        
        self.resize(window_size[0], window_size[1])
        self.move(window_pos[0], window_pos[1])
        
        # –¢–µ–º–∞
        theme = config.get('gui.theme', 'dark')
        self.apply_theme(theme)
    
    def apply_theme(self, theme: str):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã"""
        if theme == 'dark':
            self.setStyleSheet("""
                QMainWindow {
                    background-color: #2b2b2b;
                    color: #ffffff;
                }
                QTextEdit {
                    background-color: #3c3c3c;
                    color: #ffffff;
                    border: 1px solid #555555;
                }
                QLineEdit {
                    background-color: #3c3c3c;
                    color: #ffffff;
                    border: 1px solid #555555;
                    padding: 5px;
                }
                QStatusBar {
                    background-color: #353535;
                    color: #ffffff;
                }
            """)
    
    def check_components(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        status_parts = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
        if self.ollama_client.is_available():
            status_parts.append("AI ‚úì")
        else:
            status_parts.append("AI ‚úó")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ TTS
        if self.tts.is_available():
            status_parts.append("TTS ‚úì")
        else:
            status_parts.append("TTS ‚úó")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ STT
        if self.stt.is_available():
            status_parts.append("STT ‚úì")
        else:
            status_parts.append("STT ‚úó")
        
        status_text = " | ".join(status_parts)
        self.status_label.setText(status_text)
        
        # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã
        if all("‚úì" in part for part in status_parts):
            self.chat_widget.add_system_message("–°–∞–∫—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é! üå∏")
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = self.input_field.text().strip()
        if not text:
            return
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.input_field.clear()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.chat_widget.add_user_message(text)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ò–ò
        self.process_user_input(text)
    
    def process_user_input(self, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        if not self.ollama_client.is_available():
            self.chat_widget.add_error_message("–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar.setVisible(True)
        self.status_label.setText("–°–∞–∫—É—Ä–∞ –¥—É–º–∞–µ—Ç...")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        self.current_response_thread = ResponseThread(self.ollama_client, text)
        self.current_response_thread.response_ready.connect(self.on_response_ready)
        self.current_response_thread.error_occurred.connect(self.on_response_error)
        self.current_response_thread.start()
    
    def on_response_ready(self, response: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        # –°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar.setVisible(False)
        self.status_label.setText("–ì–æ—Ç–æ–≤")
        
        # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
        self.chat_widget.add_assistant_message(response)
        
        # –û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –Ω–µ –∑–∞–≥–ª—É—à–µ–Ω–æ)
        if not self.is_muted and self.tts.is_available():
            self.tts.speak(response)
        
        self.current_response_thread = None
    
    def on_response_error(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        self.progress_bar.setVisible(False)
        self.status_label.setText("–û—à–∏–±–∫–∞")
        
        self.chat_widget.add_error_message(f"–û—à–∏–±–∫–∞: {error}")
        self.current_response_thread = None
    
    def toggle_listening(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        if not self.stt.is_available():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            self.mic_button.setChecked(False)
            return
        
        if self.is_listening:
            self.stop_listening()
        else:
            self.start_listening()
    
    def start_listening(self):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"""
        if self.stt.start_listening():
            self.is_listening = True
            self.mic_button.setText("üé§ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.status_label.setText("–°–ª—É—à–∞—é...")
            self.chat_widget.add_system_message("–ù–∞—á–∏–Ω–∞—é —Å–ª—É—à–∞—Ç—å...")
        else:
            self.mic_button.setChecked(False)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ")
    
    def stop_listening(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"""
        self.stt.stop_listening()
        self.is_listening = False
        self.mic_button.setText("üé§ –°–ª—É—à–∞—Ç—å")
        self.status_label.setText("–ì–æ—Ç–æ–≤")
    
    def toggle_mute(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞"""
        self.is_muted = self.mute_button.isChecked()
        
        if self.is_muted:
            self.mute_button.setText("üîá –ó–∞–≥–ª—É—à–µ–Ω–æ")
            self.tts.stop()
        else:
            self.mute_button.setText("üîä –ó–≤—É–∫")
    
    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        reply = QMessageBox.question(
            self, 
            "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.chat_widget.clear()
            self.ollama_client.clear_history()
            self.chat_widget.add_system_message("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        dialog = SettingsDialog(self)
        if dialog.exec_() == dialog.Accepted:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.load_settings()
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        QMessageBox.about(
            self,
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            """
            <h3>Sakura AI</h3>
            <p>–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–π—Ñ—É-–≥–µ–π–º–µ—Ä —Å –ò–ò</p>
            <p><b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b></p>
            <ul>
                <li>–û–±—â–µ–Ω–∏–µ —Å –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º</li>
                <li>–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (Silero TTS)</li>
                <li>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (Vosk)</li>
                <li>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –ª–∏—á–Ω–æ—Å—Ç—å</li>
            </ul>
            <p><b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b> Python, PyQt5, Ollama, Silero, Vosk</p>
            """
        )
    
    def on_partial_speech(self, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        if text:
            self.status_label.setText(f"–°–ª—ã—à—É: {text}")
    
    def on_final_speech(self, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        if text:
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Ä–µ—á—å: {text}")
            self.input_field.setText(text)
            self.send_message()
    
    def on_speech_error(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {error}")
        self.status_label.setText("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    
    def on_tray_activated(self, reason):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ—è"""
        if reason == QSystemTrayIcon.DoubleClick:
            if self.isVisible():
                self.hide()
            else:
                self.show()
                self.raise_()
                self.activateWindow()
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if config.get('gui.minimize_to_tray', True) and hasattr(self, 'tray_icon'):
            event.ignore()
            self.hide()
            if hasattr(self, 'tray_icon'):
                self.tray_icon.showMessage(
                    "Sakura AI",
                    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π",
                    QSystemTrayIcon.Information,
                    2000
                )
        else:
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
            config.set('gui.window_size', [self.width(), self.height()])
            config.set('gui.window_position', [self.x(), self.y()])
            
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if self.is_listening:
                self.stop_listening()
            
            if self.current_response_thread:
                self.current_response_thread.wait()
            
            event.accept()
