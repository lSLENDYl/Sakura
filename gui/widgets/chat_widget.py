"""
–í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""

from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QTextEdit, QScrollArea, 
    QLabel, QFrame, QHBoxLayout, QSizePolicy
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal
from PyQt5.QtGui import QFont, QTextCursor, QPixmap, QColor, QPalette
from datetime import datetime
from typing import Optional


class MessageWidget(QFrame):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self, message: str, sender: str, timestamp: Optional[datetime] = None):
        super().__init__()
        self.message = message
        self.sender = sender
        self.timestamp = timestamp or datetime.now()
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 8, 10, 8)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        header_layout = QHBoxLayout()
        
        sender_label = QLabel(self.sender)
        sender_label.setFont(QFont("Arial", 10, QFont.Bold))
        
        time_label = QLabel(self.timestamp.strftime("%H:%M"))
        time_label.setFont(QFont("Arial", 9))
        time_label.setStyleSheet("color: #888888;")
        
        header_layout.addWidget(sender_label)
        header_layout.addStretch()
        header_layout.addWidget(time_label)
        
        layout.addLayout(header_layout)
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_label = QLabel(self.message)
        message_label.setWordWrap(True)
        message_label.setFont(QFont("Arial", 11))
        message_label.setTextInteractionFlags(Qt.TextSelectableByMouse)
        
        layout.addWidget(message_label)
        
        # –°—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        self.apply_style()
    
    def apply_style(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        if self.sender == "–í—ã":
            # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–ø—Ä–∞–≤–∞, —Å–∏–Ω–∏–π —Ñ–æ–Ω
            self.setStyleSheet("""
                MessageWidget {
                    background-color: #1976D2;
                    color: white;
                    border-radius: 10px;
                    margin-left: 50px;
                    margin-right: 10px;
                }
            """)
        elif self.sender == "–°–∞–∫—É—Ä–∞":
            # –°–æ–æ–±—â–µ–Ω–∏—è –ò–ò - —Å–ª–µ–≤–∞, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω
            self.setStyleSheet("""
                MessageWidget {
                    background-color: #7B1FA2;
                    color: white;
                    border-radius: 10px;
                    margin-left: 10px;
                    margin-right: 50px;
                }
            """)
        elif self.sender == "–°–∏—Å—Ç–µ–º–∞":
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —Ü–µ–Ω—Ç—Ä, —Å–µ—Ä—ã–π —Ñ–æ–Ω
            self.setStyleSheet("""
                MessageWidget {
                    background-color: #424242;
                    color: #CCCCCC;
                    border-radius: 8px;
                    margin-left: 30px;
                    margin-right: 30px;
                    font-style: italic;
                }
            """)
        else:
            # –û—à–∏–±–∫–∏ - –∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
            self.setStyleSheet("""
                MessageWidget {
                    background-color: #D32F2F;
                    color: white;
                    border-radius: 8px;
                    margin-left: 20px;
                    margin-right: 20px;
                }
            """)


class ChatWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
    
    message_sent = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        self.messages = []
        self.setup_ui()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.scroll_timer = QTimer()
        self.scroll_timer.setSingleShot(True)
        self.scroll_timer.timeout.connect(self.scroll_to_bottom)
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages_widget = QWidget()
        self.messages_layout = QVBoxLayout(self.messages_widget)
        self.messages_layout.setAlignment(Qt.AlignTop)
        self.messages_layout.setSpacing(8)
        
        self.scroll_area.setWidget(self.messages_widget)
        layout.addWidget(self.scroll_area)
        
        # –°—Ç–∏–ª—å
        self.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: #2b2b2b;
            }
            QWidget {
                background-color: #2b2b2b;
            }
            QScrollBar:vertical {
                background-color: #3c3c3c;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #606060;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #707070;
            }
        """)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.add_system_message("–ü—Ä–∏–≤–µ—Ç! –Ø –°–∞–∫—É—Ä–∞, —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–π—Ñ—É-–≥–µ–π–º–µ—Ä! üå∏\n–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω!")
    
    def add_message(self, message: str, sender: str, timestamp: Optional[datetime] = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        message_widget = MessageWidget(message, sender, timestamp)
        self.messages_layout.addWidget(message_widget)
        self.messages.append(message_widget)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        self.scroll_timer.start(100)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        max_messages = 1000
        if len(self.messages) > max_messages:
            old_message = self.messages.pop(0)
            old_message.deleteLater()
    
    def add_user_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.add_message(message, "–í—ã")
    
    def add_assistant_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò"""
        self.add_message(message, "–°–∞–∫—É—Ä–∞")
    
    def add_system_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.add_message(message, "–°–∏—Å—Ç–µ–º–∞")
    
    def add_error_message(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        self.add_message(message, "–û—à–∏–±–∫–∞")
    
    def scroll_to_bottom(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
        scrollbar = self.scroll_area.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        for message in self.messages:
            message.deleteLater()
        
        self.messages.clear()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—á–∏—Å—Ç–∫–µ
        self.add_system_message("–ß–∞—Ç –æ—á–∏—â–µ–Ω")
    
    def export_to_text(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        lines = []
        for message_widget in self.messages:
            timestamp_str = message_widget.timestamp.strftime("%Y-%m-%d %H:%M:%S")
            lines.append(f"[{timestamp_str}] {message_widget.sender}: {message_widget.message}")
        
        return "\n".join(lines)
    
    def get_message_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return len(self.messages)
    
    def get_last_messages(self, count: int = 10) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return self.messages[-count:] if count <= len(self.messages) else self.messages
    
    def find_messages(self, query: str) -> list:
        """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É"""
        found_messages = []
        query_lower = query.lower()
        
        for message_widget in self.messages:
            if query_lower in message_widget.message.lower():
                found_messages.append(message_widget)
        
        return found_messages
    
    def highlight_message(self, message_widget: MessageWidget):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
        original_style = message_widget.styleSheet()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        message_widget.setStyleSheet(original_style + """
            border: 2px solid #FFC107;
        """)
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        QTimer.singleShot(2000, lambda: message_widget.setStyleSheet(original_style))
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        self.scroll_area.ensureWidgetVisible(message_widget)
