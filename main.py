#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Sakura AI
–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–π—Ñ—É-–≥–µ–π–º–µ—Ä —Å –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
"""

import sys
import os
import asyncio
from PyQt5.QtWidgets import QApplication, QMessageBox, QSplashScreen
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPixmap, QFont

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from gui.main_window import MainWindow
from config.config_manager import config
from utils.logger import setup_logger, logger


class SakuraAIApplication:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.app = None
        self.main_window = None
        self.splash = None
        
    def setup_application(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–Ω–∏–µ QApplication
        self.app = QApplication(sys.argv)
        self.app.setApplicationName("Sakura AI")
        self.app.setApplicationVersion("1.0.0")
        self.app.setOrganizationName("SakuraAI")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level = config.get('logging.level', 'INFO')
        log_file = config.get('logging.file', 'logs/sakura_ai.log')
        global logger
        logger = setup_logger("SakuraAI", log_level, log_file)
        
        logger.info("=" * 50)
        logger.info("–ó–∞–ø—É—Å–∫ Sakura AI")
        logger.info("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if not self.check_requirements():
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ splash screen
        self.create_splash()
        
        return True
    
    def check_requirements(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
        if sys.version_info < (3, 8):
            QMessageBox.critical(
                None, 
                "–û—à–∏–±–∫–∞",
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ.\n–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}"
            )
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PyQt5
        try:
            from PyQt5.QtCore import QT_VERSION_STR
            logger.info(f"PyQt5 –≤–µ—Ä—Å–∏—è: {QT_VERSION_STR}")
        except ImportError:
            QMessageBox.critical(
                None,
                "–û—à–∏–±–∫–∞", 
                "PyQt5 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyQt5"
            )
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        required_modules = [
            ('torch', 'PyTorch'),
            ('ollama', 'Ollama Python client'),
            ('vosk', 'Vosk'),
            ('pyaudio', 'PyAudio'),
            ('sounddevice', 'SoundDevice')
        ]
        
        missing_modules = []
        for module_name, display_name in required_modules:
            try:
                __import__(module_name)
                logger.info(f"‚úì {display_name}")
            except ImportError:
                logger.error(f"‚úó {display_name}")
                missing_modules.append(display_name)
        
        if missing_modules:
            QMessageBox.critical(
                None,
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                f"–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥—É–ª–∏:\n" + 
                "\n".join(f"- {module}" for module in missing_modules) +
                "\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é:\npip install -r requirements.txt"
            )
            return False
        
        logger.info("–í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True
    
    def create_splash(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ splash screen"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π splash screen
            splash_pixmap = QPixmap(400, 300)
            splash_pixmap.fill(Qt.black)
            
            self.splash = QSplashScreen(splash_pixmap)
            self.splash.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.SplashScreen)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.splash.showMessage(
                "üå∏ Sakura AI\n\n–ó–∞–≥—Ä—É–∑–∫–∞...\n\n–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–π—Ñ—É-–≥–µ–π–º–µ—Ä",
                Qt.AlignCenter | Qt.AlignBottom,
                Qt.white
            )
            
            self.splash.show()
            self.app.processEvents()
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å splash screen: {e}")
    
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if self.splash:
                self.splash.showMessage(
                    "üå∏ Sakura AI\n\n–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...",
                    Qt.AlignCenter | Qt.AlignBottom,
                    Qt.white
                )
                self.app.processEvents()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...")
            self.main_window = MainWindow()
            
            if self.splash:
                self.splash.showMessage(
                    "üå∏ Sakura AI\n\n–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
                    Qt.AlignCenter | Qt.AlignBottom,
                    Qt.white
                )
                self.app.processEvents()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            QMessageBox.critical(
                None,
                "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{e}"
            )
            return False
    
    def show_main_window(self):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            # –°–∫—Ä—ã–≤–∞–µ–º splash screen
            if self.splash:
                QTimer.singleShot(1000, self.splash.close)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            self.main_window.show()
            self.main_window.raise_()
            self.main_window.activateWindow()
            
            logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.setup_application():
            return 1
        
        if not self.initialize_components():
            return 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        QTimer.singleShot(2000, self.show_main_window)
        
        # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        logger.info("–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        try:
            exit_code = self.app.exec_()
            logger.info(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º: {exit_code}")
            return exit_code
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            return 0
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return 1


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = SakuraAIApplication()
        return app.run()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
